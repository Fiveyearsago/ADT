diff -Naur studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.adt.package/about.properties studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.adt.package/about.properties
--- studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.adt.package/about.properties	2016-02-12 13:48:22.363007928 +0100
+++ studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.adt.package/about.properties	2016-02-14 00:01:36.000000000 +0100
@@ -1,6 +1,10 @@
 blurb=Android Developer Tools\n\
 \n\
-Build: {0}\n\
+Build: {featureVersion}\n\
 \n\
 Copyright (c) The Android Open Source Project.\n\
-Visit http://developer.android.com and http://source.android.com
+Visit http://developer.android.com and http://source.android.com\n\
+\n\
+Updated by Khaled Lakehal.\n\
+Visit http://github.com/khaledev/ADT
+
diff -Naur studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/GdbServerTask.java studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/GdbServerTask.java
--- studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/GdbServerTask.java	2016-02-12 13:48:21.471007947 +0100
+++ studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/GdbServerTask.java	2016-02-12 16:50:29.099075029 +0100
@@ -29,6 +29,7 @@
 public class GdbServerTask implements Runnable {
     private IDevice mDevice;
     private String mRunAs;
+    private String mExecPath;
     private String mSocket;
     private int mPid;
     private CountDownLatch mAttachLatch;
@@ -47,10 +48,11 @@
      * @param pid pid of task to attach to
      * @param attachLatch latch to notify when gdbserver gets attached to the task
      */
-    public GdbServerTask(IDevice device, String runAsPackage, String socketName, int pid,
+    public GdbServerTask(IDevice device, String runAsPackage, String executePath, String socketName, int pid,
             CountDownLatch attachLatch) {
         mDevice = device;
         mRunAs = runAsPackage;
+        mExecPath = executePath;
         mSocket = socketName;
         mPid = pid;
         mAttachLatch = attachLatch;
@@ -65,8 +67,8 @@
     @Override
     public void run() {
         // Launch gdbserver on the device.
-        String command = String.format("run-as %s lib/gdbserver +%s --attach %d",
-                mRunAs, mSocket, mPid);
+        String command = String.format("run-as %s %s/gdbserver +%s --attach %d",
+                mRunAs, mExecPath, mSocket, mPid);
         try {
             mDevice.executeShellCommand(command, mOutputReceiver, 0);
         } catch (Exception e) {
diff -Naur studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/NdkGdbLaunchDelegate.java studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/NdkGdbLaunchDelegate.java
--- studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/NdkGdbLaunchDelegate.java	2016-02-12 13:48:21.475007947 +0100
+++ studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/launch/NdkGdbLaunchDelegate.java	2016-02-13 22:55:16.976254744 +0100
@@ -16,6 +16,7 @@
 
 package com.android.ide.eclipse.ndk.internal.launch;
 
+import com.android.SdkConstants;
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;
 import com.android.ddmlib.AdbCommandRejectedException;
@@ -44,6 +45,7 @@
 import com.android.ide.eclipse.ndk.internal.NdkVariables;
 import com.android.sdklib.AndroidVersion;
 import com.android.sdklib.IAndroidTarget;
+import com.android.sdklib.devices.Abi;
 import com.google.common.base.Joiner;
 
 import org.eclipse.cdt.core.model.ICProject;
@@ -68,11 +70,14 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 @SuppressWarnings("restriction")
 public class NdkGdbLaunchDelegate extends GdbLaunchDelegate {
@@ -197,9 +202,10 @@
         monitor.setTaskName(Messages.NdkGdbLaunchDelegate_Action_ObtainDeviceABI);
         String deviceAbi1 = device.getProperty("ro.product.cpu.abi");   //$NON-NLS-1$
         String deviceAbi2 = device.getProperty("ro.product.cpu.abi2");  //$NON-NLS-1$
+        String deviceAbiList = device.getProperty("ro.product.cpu.abilist"); // a new introduced build property to get a list of supported ABIs
 
         // get the abi that is supported by both the device and the application
-        NativeAbi compatAbi = getCompatibleAbi(deviceAbi1, deviceAbi2, appAbis);
+        NativeAbi compatAbi = getCompatibleAbi(deviceAbi1, deviceAbi2, deviceAbiList, appAbis);
         if (compatAbi == null) {
             AdtPlugin.printErrorToConsole(project,
                     Messages.NdkGdbLaunchDelegate_LaunchError_NoCompatibleAbi);
@@ -259,8 +265,26 @@
         // pull app_process & libc from the device
         IPath solibFolder = project.getLocation().append("obj/local").append(compatAbi.getAbi());
         try {
-            pull(device, "/system/bin/app_process", solibFolder);   //$NON-NLS-1$
-            pull(device, "/system/lib/libc.so", solibFolder);       //$NON-NLS-1$
+            final String sysBinName = "app_process";
+            final String sysBinPath = "/system/bin/%1$s%2$s"; // /system/bin/app_process{32}
+            final String sysLibName = "libc.so";
+            final String sysLibPath = "/system/lib%2$s/%1$s"; // /system/lib{64}/libc.so
+
+            String sysBinPathParam = "";
+            String sysLibPathParam = "";
+
+            if (isDevice64(device)) {
+                if (isApplication64(compatAbi)) {
+                    sysLibPathParam = "64";
+                } else {
+                    sysBinPathParam = "32";
+                }
+            }
+
+            pull(device, String.format(sysBinPath, sysBinName, sysBinPathParam), solibFolder,
+                    sysBinName);
+            pull(device, String.format(sysLibPath, sysLibName, sysLibPathParam), solibFolder,
+                    sysLibName);
         } catch (Exception e) {
             AdtPlugin.printErrorToConsole(project,
                     Messages.NdkGdbLaunchDelegate_LaunchError_PullFileError, e);
@@ -279,10 +303,21 @@
         Client app = device.getClient(manifestData.getPackage());
         int pid = app.getClientData().getPid();
 
+        // get application's execution directory
+        String execDir = null;
+        try {
+            execDir = getExecDirectory(device, manifestData.getPackage(), compatAbi, 5,
+                    TimeUnit.SECONDS);
+        } catch (Exception e) {
+            AdtPlugin.printErrorToConsole(project,
+                    Messages.NdkGdbLaunchDelegate_LaunchError_ObtainingAppFolder, e);
+            return false;
+        }
+
         // launch gdbserver
         monitor.setTaskName(Messages.NdkGdbLaunchDelegate_Action_LaunchingGdbServer);
         CountDownLatch attachLatch = new CountDownLatch(1);
-        GdbServerTask gdbServer = new GdbServerTask(device, manifestData.getPackage(),
+        GdbServerTask gdbServer = new GdbServerTask(device, manifestData.getPackage(), execDir,
                 DEBUG_SOCKET, pid, attachLatch);
         new Thread(gdbServer,
                 String.format("gdbserver for %s", manifestData.getPackage())).start();  //$NON-NLS-1$
@@ -368,10 +403,9 @@
         }
     }
 
-    private void pull(IDevice device, String remote, IPath solibFolder) throws
-                        SyncException, IOException, AdbCommandRejectedException, TimeoutException {
-        String remoteFileName = new Path(remote).toFile().getName();
-        String targetFile = solibFolder.append(remoteFileName).toString();
+    private void pull(IDevice device, String remote, IPath solibFolder, String fileName)
+            throws SyncException, IOException, AdbCommandRejectedException, TimeoutException {
+        String targetFile = solibFolder.append(fileName).toString();
         device.pullFile(remote, targetFile);
     }
 
@@ -468,11 +502,29 @@
         }
     }
 
-    private NativeAbi getCompatibleAbi(String deviceAbi1, String deviceAbi2,
-                                Collection<NativeAbi> appAbis) {
-        for (NativeAbi abi: appAbis) {
-            if (abi.getAbi().equals(deviceAbi1) || abi.getAbi().equals(deviceAbi2)) {
-                return abi;
+    private NativeAbi getCompatibleAbi(String deviceAbi1, String deviceAbi2, String deviceAbiList,
+            Collection<NativeAbi> appAbis) {
+        Collection<String> devicesAbis;
+
+        if (deviceAbiList != null) {
+            devicesAbis = new ArrayList<String>(Arrays.asList(deviceAbiList.split(",")));
+        } else {
+            devicesAbis = new ArrayList<String>();
+        }
+
+        if (deviceAbi1 != null) {
+            devicesAbis.add(deviceAbi1);
+        }
+
+        if (deviceAbi2 != null) {
+            devicesAbis.add(deviceAbi2);
+        }
+
+        for (String deviceAbi : devicesAbis) {
+            for (NativeAbi appAbi : appAbis) {
+                if (appAbi.getAbi().equals(deviceAbi)) {
+                    return appAbi;
+                }
             }
         }
 
@@ -503,4 +555,50 @@
         commandCompleteLatch.await(timeout, timeoutUnit);
         return receiver.getOutput().trim();
     }
+
+    private String getExecDirectory(IDevice device, String app, NativeAbi compatAbi, long timeout,
+            TimeUnit timeoutUnit) throws TimeoutException, AdbCommandRejectedException,
+            ShellCommandUnresponsiveException, IOException, InterruptedException {
+        if (isDevice64(device)) {
+            final String command = "pm list packages -f";
+
+            CountDownLatch commandCompleteLatch = new CountDownLatch(1);
+            CollectingOutputReceiver receiver = new CollectingOutputReceiver(commandCompleteLatch);
+            device.executeShellCommand(command, receiver);
+            commandCompleteLatch.await(timeout, timeoutUnit);
+
+            String lines[] = receiver.getOutput().split("\\r?\\n");
+            Pattern pattern = Pattern.compile("^package:(.+?)=(.+)$");
+
+            for (String line : lines) {
+                Matcher matcher = pattern.matcher(line);
+
+                if (matcher.matches()) {
+                    String packagePath = matcher.group(1);
+                    String packageName = matcher.group(2);
+
+                    if (packageName.equals(app)) {
+                        Abi abi = Abi.getEnum(compatAbi.getAbi());
+                        return String.format("%s/lib/%s",
+                                packagePath.substring(0, packagePath.lastIndexOf('/')),
+                                (abi != null) ? abi.getCpuArch() : SdkConstants.CPU_ARCH_ARM);
+                    }
+                }
+            }
+        }
+
+        return "lib";
+    }
+
+    private boolean isApplication64(NativeAbi abi) {
+        return abi.getAbi().equals(SdkConstants.ABI_ARM64_V8A)
+                || abi.getAbi().equals(SdkConstants.ABI_INTEL_ATOM64)
+                || abi.getAbi().equals(SdkConstants.ABI_MIPS64);
+    }
+
+    private boolean isDevice64(IDevice device) {
+        String abilist64 = device.getProperty("ro.product.cpu.abilist64");
+        return (abilist64 != null) && (abilist64.length() > 0);
+    }
+
 }
diff -Naur studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/NativeAbi.java studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/NativeAbi.java
--- studio-1.2-original/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/NativeAbi.java	2016-02-12 13:48:21.475007947 +0100
+++ studio-1.2-release/sdk/eclipse/plugins/com.android.ide.eclipse.ndk/src/com/android/ide/eclipse/ndk/internal/NativeAbi.java	2016-02-12 16:47:45.315078524 +0100
@@ -21,8 +21,11 @@
 public enum NativeAbi {
     armeabi(SdkConstants.ABI_ARMEABI),
     armeabi_v7a(SdkConstants.ABI_ARMEABI_V7A),
+    arm64_v8a(SdkConstants.ABI_ARM64_V8A),
     mips(SdkConstants.ABI_MIPS),
-    x86(SdkConstants.ABI_INTEL_ATOM);
+    mips64(SdkConstants.ABI_MIPS64),
+    x86(SdkConstants.ABI_INTEL_ATOM),
+    x86_64(SdkConstants.ABI_INTEL_ATOM64);
 
     private final String mAbi;
 
